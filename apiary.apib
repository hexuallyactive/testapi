FORMAT: 1A

# General Mills
Presenter Toolbox API

# Group Authentication

## Authentication [/auth] 

### Retrieve Auth Token [POST]
+ Response 200 (application/json)
    + Body
    
            { "token": "XXXYYY" }

# Group Mode
Center Mode control

## Mode Collection 
This might need a paired websocket frame for state changes from other inputs

## Mode Collection [/modes]
### List all available Modes [GET]

+ Request

    + Headers

            Authentication: {token}

+ Response 200 (application/json)
    + Body
    
            [
              {
                "ModeId": "1",
                "Mode": "Welcome",
                "active": true
              },
              {
                "ModeId": "2",
                "Mode": "Presentation",
                "active": false
              },
              {
                "ModeId": "3",
                "Mode": "Break",
                "active": false
              }
            ]
  
## Mode Select [/mode/{id}]

+ Parameters
    + id (required, number, `1`) ... Numeric `id` of the Mode to perform action with.

### Set Mode Active [PUT]

+ Request

    + Headers

            Authentication: {token}

+ Response 200 (application/json)

# Group Displays
Display control

## Displays Collection [/displays]
### List all available Sources [GET]

+ Request

    + Headers

            Authentication: {token}

+ Response 200 (application/json)
    + Body
    
                [{
                  "DisplayId": 1, "name": "Left Arc Exterior", "type": "primary"
                }, {
                  "DisplayId": 2, "name": "Left Arc Interior", "type": "primary"
                }, {
                  "DisplayId": 3, "name": "Center", "type": "primary"
                }, {
                  "DisplayId": 4, "name": "Right Arc Interior", "type": "primary"
                }, {
                  "DisplayId": 5, "name": "Right Arc Exterior", "type": "primary"
                }, {
                  "DisplayId": 6, "name": "Participant Tablet", "type": "primary"
                }, {
                  "DisplayId": 7, "name": "Beacon", "type": "secondary"
                }, {
                  "DisplayId": 8, "name": "Learn and Share Table", "type": "secondary"
                }, {
                  "DisplayId": 9, "name": "Conference Room 1", "type": "secondary"
                }, {
                  "DisplayId": 10, "name": "Conference Room 2", "type": "secondary"
                }, {
                  "DisplayId": 11, "name": "Kitchen", "type": "secondary"
                }, {
                  "DisplayId": 12, "name": "Virtual Store", "type": "secondary"
                }]

# Group Sources

## Sources Collection [/sources]
### List all available Sources [GET]
+ Request

    + Headers

            Authentication: {token}
            
+ Response 200 (application/json)
    + Body
    
                [{
                  "SourceId": 1, "name": "Rack PC 1 - Tibco Spotfire"
                }, {
                  "SourceId": 2, "name": "Rack PC 2 - Donuts"
                }]

# Group Source Stepper          
## Stepper [/sourcestepper/{id}] 

### Source Stepper Forward [PUT]

+ Parameters
    + id (required, number, `1`) ... Numeric `id` of the Source.

+ Request

    + Headers

            Authentication: {token}

+ Response 200 (application/json)

### Source Stepper Backward [DELETE]

+ Parameters
    + id (required, number, `1`) ... Numeric `id` of the Source.
    
+ Request

    + Headers

            Authentication: {token}

+ Response 200 (application/json)
            
# Group Panorama
Panorama application control

## Panorama Collection [/panoramas?visit_id={id}]

### List all Panoramas [GET]
+ Request

    + Headers

            Authentication: {token}

+ Response 200 (application/json)

        [{
          "id": 1, "name": "Panorama 1"
        }, {
          "id": 2, "name": "Panorama 2"
        }]

## Panorama Command [/panorama/{id}]
### Launch Panorama [PUT]
+ Request

    + Headers

            Authentication: {token}
+ Response 200 (application/json)

### Close Panorama [DELETE]
+ Request

    + Headers

            Authentication: {token}
+ Response 200 (application/json)

# Group Agenda
Agenda application control
  
## Agenda Items Collection [/agendas/visitid={id}]

### List all Agenda Items [GET]
+ Request

    + Headers

            Authentication: {token}
+ Response 200 (application/json)

        [
          {
            "AgendaId": "1",
            "AgendaDate": "2014-08-07 08:00:00",
            "Presentations": []
          },
          {
            "AgendaId": "4",
            "AgendaDate": "2014-08-08 04:00:00",
            "Presentations": []
          },
          {
            "AgendaId": "7",
            "AgendaDate": "2014-08-08 08:00:00",
            "Presentations": [
              {
              "PresentationId": "1"
              "Title": "Prezi 1"
              },
              {
              "PresentationId": "7"
              "Title": "Prezi 7"
              },
            ]
          },
          {
            "AgendaId": "6",
            "AgendaDate": "2014-08-08 08:15:00",
            "Presentations": []
          },
          {
            "AgendaId": "5",
            "AgendaDate": "2014-08-08 13:30:00",
            "Presentations": []
          }
        ]

## Agenda Display [/agenda]
### Launch Agenda [PUT]
+ Request

    + Headers

            Authentication: {token}
+ Response 200 (application/json)

### Close Agenda [DELETE]
+ Request

    + Headers

            Authentication: {token}
+ Response 200 (application/json)

## Agenda Display [/agenda/{displayid}]
### Change Agenda App Display [PATCH]
+ Request
    + Headers
    
            Authentication: {token}
+ Response 200 (application/json)

# Group Participant List
Participant application control
  
## Participant [/participant]

### Launch Paticipant List [PUT]
+ Request
    + Headers
    
            Authentication: {token}
+ Response 200 (application/json)

### Close Participant List [DELETE]
+ Request
    + Headers
    
            Authentication: {token}
+ Response 200 (application/json)

## Participant Display [/participant/{displayid}]
### Change Participant App Display [PATCH]
+ Request
    + Headers
    
            Authentication: {token}
+ Response 200 (application/json)

# Group Visits
Visit control

## Visits Collection [/visits]
### List all Visits [GET]
+ Request
    + Headers
    
            Authentication: {token}
+ Response 200 (application/json)

        [{
          "VisitId": 1, "MeetingName": "Visit 1", "active": true
        }, {
          "VisitId": 2, "MeetingName": "Visit 2", "active": false
        }]
            
### Set active visit [PUT]
+ Request
    + Headers
    
            Authentication: {token}
+ Response 200 (application/json)

# Group Presentations
Presentation related resources of the **Presentation API**

## Presentations Collection [/presentations?visit_id={id}]
### List all Presentations [GET]
+ Request
    + Headers
    
            Authentication: {token}
+ Response 200 (application/json)

        [{
          "id": 1, "title": "p1"
        }, {
          "id": 2, "title": "p2"
        }]
            
## Presentation [/presentation/{id}]
PUT with id 0 to close
### Open/Close Presentation [PUT]
+ Request
    + Headers
    
            Authentication: {token}
+ Response 200 (application/json)
            
# Group Presentation Steps

## Presentation Steps Collection [/steps?presentation_id={id}]
### List all Steps [GET]
+ Request
    + Headers
    
            Authentication: {token}
+ Response 200 (application/json)

        [{
          "PresentationStepId": 1, "Name": "Step 1"
        }, {
          "PresentationStepId": 2, "Name": "Step 2"
        }]

## Set Current Step [/step/{id}] 

### Set Current Step [PUT]
+ Request
    + Headers
    
            Authentication: {token}
+ Response 200 (application/json)
    + Body
    
            { "status": "ok" }

# Group Assets
Asset control

## Asset Collection [/assets?visit_id={id}]
### List all Assets [GET]
+ Request
    + Headers
    
            Authentication: {token}
+ Response 200 (application/json)

        {
        "folders":
            [{"id":"9","title":"New Folder"}],
        "assets":
            [
            {"id":"7","title":"Koala", "type": "Image", "image":"http:\/\/gmi-dev.downstreamsandbox.com\/repository\/preview\/53c6ccd369323.jpg.png"},
            {"id":"8","title":"Test Image", "type": "PDF", "image":"http:\/\/gmi-dev.downstreamsandbox.com\/repository\/preview\/53c6cd236cee1.jpg.png"}
            ]
        }

## Asset Placement [/asset/{id}] 

+ Parameters
    + id (required, number, `1`) ... Numeric `id` of the Asset to perform action with.

### Place Asset [PUT]
+ Request
    + Headers
    
            Authentication: {token}
+ Response 200 (application/json)
    + Body
    
            { "status": "ok" }


# Group Surveys - TBD
<!--
## Surveys Collection [/surveys?visit_id={id}]
### List all Surveys [GET]
+ Response 200 (application/json)

        [{
          "id": 1, "title": "p1"
        }, {
          "id": 2, "title": "p2"
        }]
        
## Survey [/survey/{id}]
A single Presentation object with all its details

+ Parameters
    + id (required, number, `1`) ... Numeric `id` of the Survey to perform action with.

### Retrieve a Survey [GET]
+ Response 200 (application/json)

    + Body

            { "id": 1, "title": "Need mock data" }
            
# Group Survey Stepper - TBD

## Stepper [/surveystepper] 

### Survey Stepper Forward [PUT]
+ Response 200 (application/json)
    + Body
    
            { "status": "ok" }

### Survey Stepper Backward [DELETE]
+ Response 200 (application/json)
    + Body
    
            { "status": "ok" }
-->
