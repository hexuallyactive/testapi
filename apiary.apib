FORMAT: 1A

# General Mills
Presenter Toolbox API

# Group Authentication

## Authentication [/auth] 

### Authenticate Credentials [POST]
+ Response 200 (application/json)
    + Body
    
            { "token": "XXXYYY" }

# Group Mode
Center Mode control

## Mode Collection 
This might need a paired websocket frame for state changes from other inputs

## Mode Collection [/mode]
### List all available Modes [GET]
+ Response 200 (application/json)
    + Body
    
            [
              {
                "ModeId": "1",
                "Mode": "Welcome",
                "active": true
              },
              {
                "ModeId": "2",
                "Mode": "Presentation",
                "active": false
              },
              {
                "ModeId": "3",
                "Mode": "Break",
                "active": false
              }
            ]
  
## Mode Select [/mode/{id}]

+ Parameters
    + id (required, number, `1`) ... Numeric `id` of the Mode to perform action with.

### Set Mode Active [PUT]
+ Response 200 (application/json)
    + Body
    
            { "status": "ok" }

# Group Displays
Display control

## Displays Collection [/display]
### List all available Sources [GET]
+ Response 200 (application/json)
    + Body
    
                [{
                  "DisplayId": 1, "name": "Left Arc Exterior", "type": "primary"
                }, {
                  "DisplayId": 2, "name": "Left Arc Interior", "type": "primary"
                }, {
                  "DisplayId": 3, "name": "Center", "type": "primary"
                }, {
                  "DisplayId": 4, "name": "Right Arc Interior", "type": "primary"
                }, {
                  "DisplayId": 5, "name": "Right Arc Exterior", "type": "primary"
                }, {
                  "DisplayId": 6, "name": "Participant Tablet", "type": "primary"
                }, {
                  "DisplayId": 7, "name": "Beacon", "type": "secondary"
                }, {
                  "DisplayId": 8, "name": "Learn and Share Table", "type": "secondary"
                }, {
                  "DisplayId": 9, "name": "Conference Room 1", "type": "secondary"
                }, {
                  "DisplayId": 10, "name": "Conference Room 2", "type": "secondary"
                }, {
                  "DisplayId": 11, "name": "Kitchen", "type": "secondary"
                }, {
                  "DisplayId": 12, "name": "Virtual Store", "type": "secondary"
                }]

# Group Feed
Feed control

## Feed Collection [/feed]
### List all Feeds [GET]
+ Response 200 (application/json)

        [{
          "id": 1, "name": "Test Feed"
        }]
  
## Feed Select [/feed/{id}]

+ Parameters
    + id (required, number, `1`) ... Numeric `id` of the Mode to perform action with.

### Set Feed Active [PUT]
+ Response 200 (application/json)
    + Body
    
            { "status": "ok" }
            
# Group Panorama
Panorama application control

## Panorama Collection [/panorama]

### List all Panoramas [GET]
+ Response 200 (application/json)

        [{
          "id": 1, "name": "Panorama 1"
        }, {
          "id": 2, "name": "Panorama 2"
        }]
  
## Panorama Command [/panorama/{id}/command/{command}]

+ Parameters
    + id (required, number, `1`) ... Numeric `id` of the Panorama to perform action with.
    + command (required, string, ``) ... String `command` accepts `activate`, `close`

### Send Panorama Command [PUT]
+ Response 200 (application/json)
    + Body
    
            { "status": "ok" }

# Group Consumer Insight
Consumer Insight application control

## Consumer Insight Collection [/insight]
### List all Consumer Insights [GET]
+ Response 200 (application/json)

        [{
          "id": 1, "name": "Insight 1"
        }, {
          "id": 2, "name": "Insight 2"
        }]
  
## Consumer Insight Command [/insight/{id}/command/{command}]   

+ Parameters
    + id (required, number, `1`) ... Numeric `id` of the Consumer Insight to perform action with.
    + command (required, string, ``) ... String `command` accepts `activate`, `prev` and `next`
    
### Send Consumer Insight Command [PUT]
+ Response 200 (application/json)
    + Body
    
            { "status": "ok" }

# Group Assets
Asset control

## Asset Collection [/assets/{id}]
### List all Assets [GET]
+ Response 200 (application/json)

        {
        "folders":
            [{"id":"9","title":"New Folder"}],
        "assets":
            [
            {"id":"7","title":"Koala", "type": "Image", "image":"http:\/\/gmi-dev.downstreamsandbox.com\/repository\/preview\/53c6ccd369323.jpg.png"},
            {"id":"8","title":"Test Image", "type": "PDF", "image":"http:\/\/gmi-dev.downstreamsandbox.com\/repository\/preview\/53c6cd236cee1.jpg.png"}
            ]
        }

## Asset Placement [/asset/{id}/sourceid/{sourceid}] 

+ Parameters
    + id (required, number, `1`) ... Numeric `id` of the Asset to perform action with.
    + sourceid (required, number, `1`) ... Numeric `sourceid` of the External Source to place Asset on

### Place Asset [PUT]
+ Response 200 (application/json)
    + Body
    
            { "status": "ok" }


# Group Visits
Visit control

## Visits Collection [/visits]
### List all Visits [GET]
+ Response 200 (application/json)

        [{
          "id": 1, "name": "Visit 1",
        }, {
          "id": 2, "name": "Visit 2"
        }]
            
## Visit [/visit/{id}]
A single Visit object with all its details

+ Parameters
    + id (required, number, `1`) ... Numeric `id` of the Visit to perform action with.

### Retrieve a Visit [GET]
+ Response 200 (application/json)

    + Body

            [
            { "id": 1, "title": "Kroger", date: "07-01-2014" starttime: "8:00am" },
            { "id": 2, "title": "General Mills Internal", date: "07-01-2014" starttime: "1:00pm" }
            ]
            
### Set active visit [PUT]
+ Response 200 (application/json)

            { "status": "ok" }

# Group Presentations
Presentation related resources of the **Presentation API**

## Presentations Collection [/presentations?visit_id={id}]
### List all Presentations [GET]
+ Response 200 (application/json)

        [{
          "id": 1, "title": "p1"
        }, {
          "id": 2, "title": "p2"
        }]
            
## Presentation [/presentation/{id}]
A single Presentation object with all its details

+ Parameters
    + id (required, number, `1`) ... Numeric `id` of the Presentation to perform action with.

### Retrieve a Presentation [GET]
+ Response 200 (application/json)

    + Body

            { "id": 1, "title": "Need mock data" }


