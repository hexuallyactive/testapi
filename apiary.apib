FORMAT: 1A

# General Mills
Presenter Toolbox API

# Group Authentication

## Authentication [/auth] 

### Authenticate Credentials [POST]
+ Response 200 (application/json)
    + Body
    
            { "token": "XXXYYY" }

# Group Mode
Center Mode control

## Mode Collection 
This might need a paired websocket frame for state changes from other inputs

## Mode Collection [/mode]
### List all available Modes [GET]
+ Response 200 (application/json)
    + Body
    
            [{
              "id": 1, "name": "Welcome", "active": true
            }, {
              "id": 2, "name": "Presentation", "active": false
            }, {
              "id": 3, "name": "Break", "active": false
            }]
  
## Mode Select [/mode/{id}]

+ Parameters
    + id (required, number, `1`) ... Numeric `id` of the Mode to perform action with.

### Set Mode Active [PUT]
+ Response 200 (application/json)
    + Body
    
            { "status": "ok" }

# Group Displays
Display control

## Displays Collection [/display]
### List all available Sources [GET]
+ Response 200 (application/json)
    + Body
    
            [{
              "id": 1, "name": "Left Arc Exterior", "type": "primary"
            }, {
              "id": 2, "name": "Left Arc Interior", "type": "primary"
            }, {
              "id": 3, "name": "Center", "type": "primary"
            }, {
              "id": 4, "name": "Right Arc Interior", "type": "primary"
            }, {
              "id": 5, "name": "Right Arc Exterior", "type": "primary"
            }, {
              "id": 6, "name": "Participant Tablet", "type": "primary"
            }, {
              "id": 7, "name": "Beacon", "type": "secondary"
            }, {
              "id": 8, "name": "Learn and Share Table", "type": "secondary"
            }, {
              "id": 9, "name": "Conference Room 1", "type": "secondary"
            }, {
              "id": 10, "name": "Conference Room 2", "type": "secondary"
            }, {
              "id": 11, "name": "Kitchen", "type": "secondary"
            }, {
              "id": 12, "name": "Virtual Store", "type": "secondary"
            }]

# Group Feed
Feed control

## Feed Collection [/feed]
### List all Feeds [GET]
+ Response 200 (application/json)

        [{
          "id": 1, "name": "Test Feed"
        }]
  
## Feed Select [/feed/{id}]

+ Parameters
    + id (required, number, `1`) ... Numeric `id` of the Mode to perform action with.

### Set Feed Active [PUT]
+ Response 200 (application/json)
    + Body
    
            { "status": "ok" }
            
# Group Panorama
Panorama application control

## Panorama Collection [/panorama]

### List all Panoramas [GET]
+ Response 200 (application/json)

        [{
          "id": 1, "name": "Panorama 1"
        }, {
          "id": 2, "name": "Panorama 2"
        }]
  
## Panorama Command [/panorama/{id}/command/{command}]

+ Parameters
    + id (required, number, `1`) ... Numeric `id` of the Panorama to perform action with.
    + command (required, string, ``) ... String `command` accepts `activate`, `close`

### Send Panorama Command [PUT]
+ Response 200 (application/json)
    + Body
    
            { "status": "ok" }

# Group Consumer Insight
Consumer Insight application control

## Consumer Insight Collection [/insight]
### List all Consumer Insights [GET]
+ Response 200 (application/json)

        [{
          "id": 1, "name": "Insight 1"
        }, {
          "id": 2, "name": "Insight 2"
        }]
  
## Consumer Insight Command [/insight/{id}/command/{command}]   

+ Parameters
    + id (required, number, `1`) ... Numeric `id` of the Consumer Insight to perform action with.
    + command (required, string, ``) ... String `command` accepts `activate`, `prev` and `next`
    
### Send Consumer Insight Command [PUT]
+ Response 200 (application/json)
    + Body
    
            { "status": "ok" }

# Group Assets
Asset control

## Asset Collection [/asset]
### List all Assets [GET]
+ Response 200 (application/json)

        [
        {"id": 1, "title": "Handouts", [{"id": 2, "title": "A file.pdf"},{"id": 3, "title": "Another file.pdf"}]},
        {"id": 4, "title": "Images", [{"id": 5, "title": "hero.png"},{"id": 6, "title": "hamburger.jpg"}]},
        {"id": 4, "title": "Moar Images", []}
        ]

## Asset Placement [/asset/{id}/sourceid/{sourceid}] 

+ Parameters
    + id (required, number, `1`) ... Numeric `id` of the Asset to perform action with.
    + sourceid (required, number, `1`) ... Numeric `sourceid` of the External Source to place Asset on

### Place Asset [PUT]
+ Response 200 (application/json)
    + Body
    
            { "status": "ok" }


# Group Visits
Visit control

## Visits Collection [/visit]
### List all Visits [GET]
+ Response 200 (application/json)

        [{
          "id": 1, "name": "Visit 1",
        }, {
          "id": 2, "name": "Visit 2"
        }]
            
## Visit [/visit/{id}]
A single Visit object with all its details

+ Parameters
    + id (required, number, `1`) ... Numeric `id` of the Visit to perform action with.

### Retrieve a Visit [GET]
+ Response 200 (application/json)

    + Body

            [
            { "id": 1, "title": "Kroger", date: "07-01-2014" starttime: "8:00am" },
            { "id": 1, "title": "General Mills Internal", date: "07-01-2014" starttime: "1:00pm" }
            ]
            
## Current Visit [/currentvisit]
### Return current visit (0 if none) [GET]
+ Response 200 (application/json)

        {
          "id": 1, "name": "Visit 1"
        }
        
## Set current visit [/currentvisit/{id}]

+ Parameters
    + id (required, number, `1`) ... Numeric `id` of the Visit to set active/current (0 for none).

### Set Mode Active [PUT]
+ Response 200 (application/json)
    + Body
    
            { "status": "ok" }

# Group Presentations
Presentation related resources of the **Presentation API**

## Presentations Collection [/presentation]
### List all Presentations [GET]
+ Response 200 (application/json)

        [{
          "id": 1, "title": "p1"
        }, {
          "id": 2, "title": "p2"
        }]
            
## Presentation [/presentation/{id}]
A single Presentation object with all its details

+ Parameters
    + id (required, number, `1`) ... Numeric `id` of the Presentation to perform action with.

### Retrieve a Presentation [GET]
+ Response 200 (application/json)

    + Body

            { "id": 1, "title": "Need mock data" }


